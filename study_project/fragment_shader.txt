#version 330

in vec3 v_color;
in vec3 v_normal;
in vec3 v_position;

layout(location = 0) out vec4 o_color;

const float gamma = 2.2;
const float ambient_strength = 0.1;
const vec3 light_color = vec3(1.0, 1.0, 1.0);
const vec3 light_pos = vec3(1.0, 1.0, 0.0);

void main()
{
	vec3 ambient = ambient_strength * light_color;

	vec3 n = normalize(v_normal);
	vec3 light_vec = normalize(light_pos - v_position);

	float diff = max(dot(light_vec, n), 0.1);
	vec3 diffuse = diff * light_color;

	vec3 result = (ambient + diffuse) * v_color;
	// o_color = vec4(pow(lin_color, vec3(1.0 / gamma)), 1.0);
	o_color = vec4(result, 1.0);
}
$

vec3 eye_vec = normalize(-v_position);
float diffuse = max(dot(light_vec, n), 0.1);
vec3 half_vec = normalize(light_vec + eye_vec);
float specular = pow(max(dot(half_vec, n), 0.0), 20.0);
vec3 lin_color = v_color * diffuse + vec3(specular);